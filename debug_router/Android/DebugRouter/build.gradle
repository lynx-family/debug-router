apply plugin: 'com.android.library'
apply from: 'jacoco.gradle'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply from: './publish.gradle'
android {
    compileSdkVersion 28
    buildToolsVersion "30.0.0"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        buildConfigField("String", "DEBUGROUTER_VERSION", "\"${VERSION}\"")
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            externalNativeBuild {
                cmake {
                    arguments '-DANDROID_PLATFORM=android-14',
                            '-DBUILD_LEPUS_COMPILE=false',
                            '-DANDROID_TOOLCHAIN=clang',
                            '-DANDROID_STL=c++_static',
                            '-DCMAKE_BUILD_TYPE=Release',
                            '-DLOCAL_ARM_NEON=true',
                            '-LH'
                    cppFlags '-Wl,-ldl',
                            '-Wno-unused-command-line-argument'
                }
            }
            ndk {
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            externalNativeBuild {
                cmake {
                    arguments '-DANDROID_PLATFORM=android-14',
                            '-DBUILD_LEPUS_COMPILE=false',
                            '-DANDROID_TOOLCHAIN=clang',
                            '-DLOCAL_ARM_NEON=true',
                            '-LH'

                    cppFlags "-g",
                            '-Wl,-ldl',
                            '-Wno-unused-command-line-argument'
                }
            }
            ndk {
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }
            debuggable true
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    buildFeatures {
        prefabPublishing true
    }

    prefab {
        lynxdebugrouter {
            headers "src/main/export"
        }
    }

}

// AGP 4.1 not support headerOnly, and prefab has confict with c++_static flag,
// so we need to remove prefab meta files manually
task removePrefabMetaFiles {
    afterEvaluate {
        project.android.libraryVariants.all { variant ->
            def prefabPackageTask = project.tasks.findByName("prefab${variant.name.capitalize()}Package")
            if (prefabPackageTask != null) {
                def outputDir = prefabPackageTask.getOutputDirectory()
                dependsOn prefabPackageTask
                prefabPackageTask.doLast {
                    FileTree fileTree = project.fileTree(outputDir)
                    fileTree.each { file ->
                        if (file.name.endsWith("abi.json") || file.name.endsWith(".so")) {
                            println("remove prefab meta file: " + file.name + ", " + file.parent)
                            file.delete()
                        }
                    }
                }
            }
        }
    }
}

dependencies {
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    compileOnly 'androidx.annotation:annotation:1.0.0'
    testImplementation "junit:junit:4.12"
    androidTestImplementation 'org.mockito:mockito-android:4.8.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
}

task copy_export_headers(type: Exec) {
   println("start copy_export_headers: ")
   def out = new ByteArrayOutputStream()
   def error = System.out
   def reset_export_cmd = "rm -rf src/main/export/ && mkdir src/main/export/"
   exe_shell_cmd(reset_export_cmd, out, error)
   def cp_file_cmd = "mkdir -p src/main/export/protocol/json/ && cp ../../../third_party/jsoncpp/include/json/*.h src/main/export/protocol/json/"
   exe_shell_cmd(cp_file_cmd, out, error)
   println(out.toString())
}

private void exe_shell_cmd(cmd, out, error) {
    println(cmd)
    exec {
        ExecSpec execSpec ->
            executable 'bash'
            args '-c', cmd
            standardOutput = out
            errorOutput = error
    }
}

task generateJNIHeader {
    description "Generate JNI headers for DebugRouter."
    exec {
        workingDir "../../../"
        commandLine "bash", "tools/build_jni/prebuild_jni.sh" 
        println commandLine
    }
}
